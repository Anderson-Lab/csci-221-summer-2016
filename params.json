{
  "name": "CSCI 221 Summer 2016",
  "tagline": "Computer Science @ College of Charleston",
  "body": "## Important Links\r\n* [Facebook Group](https://www.facebook.com/groups/1073705086030591/)\r\n* [Programming Assignments](https://codelab3.turingscraft.com/codelab/jsp/login1.jsp)\r\n* [Lectures](https://lowcountrygraduatecenter.mediasite.com)\r\n** You must navigate Harbor Walk -> Computer Science ... 221\r\n* [Course Materials, Slides, etc](https://www.dropbox.com/sh/jigccardrxiz4aw/AABpjlLv8ySWnTDkQ_kh2kjJa?dl=0)\r\n\r\n### Joining the CodeLab\r\n\r\nREGISTRATION (FOR STUDENTS):\r\n* Go to jblearning.turingscraft.com\r\n* Follow the instructions associated with the Reis book.\r\n* Use the Section Access Code: JBLE-24833-VGGK-29\r\n\r\n# Syllabus\r\n## Official Course Description\r\n<p align=\"justify\">\r\n<a href=\"http://www.cofc.edu\"><img src=\"http://freyja.cs.cofc.edu/cofc.sepng\" height=\"50\" align=\"right\" hspace=\"10px\"> </a>\r\nCSCI 221 Computer Programming II This course further develops object-oriented programming introduced in CSCI 220. Topics include file input/output, inheritance and polymorphism, exceptions, error handling, and algorithm analysis. Data structures include lists, stacks, and queues. Algorithms include searching and sorting. Prerequisites: CSCI 220 and CSCI 222. Prerequisite or Co-requisite: MATH 207.\r\n</p>\r\n\r\n## Required Text\r\nAn Introduction to Programming Using Java by Anthony J. Dos Reis - http://www.jblearning.com/catalog/9781449639037/\r\n\r\n## Course Details\r\n\r\n### Contact Information\r\n* Professor: Dr. Paul Anderson\r\n* Office: 313 HWEA\r\n* Office Hours: My door is always open. Even if it isn't, please knock. I always love to hear from students. I have a little sign that I try to keep up in the window to show when I am in the office.\r\n* E-mail: andersonpe2@cofc.edu\r\n* Office Phone: 843-953-8151\r\n* Facebook: andersonpe2@cofc.edu\r\n\r\n### Course (learning) outcomes\r\n\r\n* Apply the software development process in problem solving. Specifically, focus on\r\ncoding to a specification (including pre- and post-conditions), using pseudo-code, test\r\ndriven development, range and boundary checking, and unit testing. [3].\r\n* Learn Java syntax. This includes constants and variables, assignment, arithmetic\r\noperations, relational operators, logical operators (including short–circuit), selection\r\nstatements, repetition statements, and data types (i.e. reference, primitive) and\r\nprimitive wrapper classes [2].\r\n* Code solutions that use IO operations. This includes reading/writing text from\r\nstandard IO, reading/writing structured data (e.g. csv or imaging data) from a file [3].\r\n* Store and manipulate data using one- and two-dimensional arrays. This includes\r\niteration and common tasks such as finding max/min, summing, making copies\r\n(shallow and deep copy operations) and other aggregate operations [3].\r\n* Design classes and apply them in program development. This includes object\r\ninstantiation, methods (e.g. constructors, getters, setters, helpers), overloading and\r\noverriding (e.g toString, equals), static versus non–static methods/variables, access\r\nqualifiers (public, protected, private), and “this” reference [4].\r\n* Apply object-oriented design principles in program development. This includes\r\ninheritance (abstract classes and interfaces, is-a relationships), composition (has-a\r\nrelationship) and class hierarchies [4]. Identify scenarios in which inheritance or\r\ncomposition is appropriate [5].\r\n* Apply exceptions in program development. This includes defining exception classes\r\nusing inheritance, 'throws' and 'try/catch' syntax, and understanding the difference\r\nbetween checked and un-check exceptions [3].\r\n* Analyze recursive algorithms (such as factorial, fibonacci, list length, and binary\r\nsearch) and explain/trace using a stack data structure [4].\r\n* Code a dynamic array-based collection (such as an ArrayList, OrderedList,\r\nPriorityQueue,). This includes implementing an interface, managing both size and\r\ncapacity, and traversal via an iterator [4].\r\n* Code a multi-class project/application that applies the OOD principles covered in this\r\nclass. (Multi-class is defined as a minimum of 4 classes.) [4]\r\n\r\n### Grading Policy\r\n\r\n* Exams - 50%\r\n* Programming Assignments - 50%\r\n\r\nGrading Scale: A: 90-100; B: 80-89; C: 70-79; D: 65-69; F: <65. Plusses and minuses will be used at the discretion of the instructor.\r\n\r\nGrading Guidelines: Submitted work requires Analysis, Evaluation, and Creation of ideas, concepts, and materials into various deliverables (e.g., see revised Bloom's Taxonomy and reference below).\r\n\r\n* The grade of A is for work that involves high-quality achievement in all three Bloom areas.\r\n* The grade of B is for work that involves high-quality achievement in at least two Bloom areas, and medium-level achievement in the other.\r\n* The grade of C is for work that involves high-quality achievement in at least one Bloom area, and medium-level achievement in the others.\r\n* The grade of F is for work that does not meet above criteria.\r\n\r\nReference: Errol Thompson, Andrew Luxton-Reilly, Jacqueline L. Whalley, Minjie Hu, and Phil Robbins. 2008. Bloom's taxonomy for CS assessment. In Proceedings of the tenth conference on Australasian computing education - Volume 78 (ACE '08), Simon Hamilton and Margaret Hamilton (Eds.), Vol. 78. Australian Computer Society, Inc., Darlinghurst, Australia, Australia, 155-161.\r\n\r\n### Lecture Style\r\n\r\nLecturing about programming is like teaching someone how to swim by talking about swimming. Interesting, but not very helpful. This class has been designed with this in mind. We will discuss core concepts in class, and then use the remaining time as a lab to work on programming assignments, which will then turn into homework if not completed. \r\n\r\n### Exams \r\n\r\nExams will be administered every Friday.\r\n\r\n### Programming Assignments\r\n\r\nProgramming is all about practice. Approximately, every other day there will be programming assignments due.\r\n\r\n### Honor Code\r\n\r\nYou must do your work alone (or with your teammates, for group assignments).\r\nYou must identify your sources of material and inspiration. It is a violation of the honor code to present someone else's work or ideas as your own.\r\nIn any course deliverable, you must always identify the person(s) that helped you (directly or indirectly), if any, and explain their contribution to your work.\r\nAlso see the College of Charleston Student Handbook, especially sections on The Honor Code (p. 11), and Student Code of Conduct (p. 12). There is other useful information there.\r\nClassroom Policies\r\n\r\nYou are expected to take good notes during class.\r\nYou are expected to participate in class with questions and invited discussion.\r\nYou are expected to attend all classes. The grade 'WA' will be given for excessive (>= 3) absences. If you miss class, you must get an absence memo from the Associate Dean of Students Office; also, you are responsible for announcements made in class, assignment due dates, etc.\r\nYou should turn off all electronic devices (e.g., cell phones, pagers, etc.).\r\nIn summary, you should contribute positively to the classroom learning experience, and respect your classmates right to learn (see College of Charleston Student Handbook, section on Classroom Code of Conduct (p. 58)).\r\nLate Policy\r\n\r\nNo late days will be allowed without an excuse. Falling behind on assignments will make it difficult to achieve the learning outcomes of this course.\r\n\r\n### Classroom Policies\r\n* You are expected to take good notes during class.\r\n* You are expected to participate in class with questions and invited discussion.\r\n* You are expected to attend all classes. The grade 'WA' will be given for excessive (>= 3) absences. If you miss class, you must get an absence memo from the Associate Dean of Students Office; also, you are responsible for announcements made in class, assignment due dates, etc.\r\n* You should turn off all electronic devices (e.g., cell phones, pagers, etc.).\r\n* In summary, you should contribute positively to the classroom learning experience, and respect your classmates right to learn (see College of Charleston Student Handbook, section on Classroom Code of Conduct (p. 58)).\r\n\r\n### Late Policy\r\n\r\nNo late days will be allowed without a documented excuse.\r\n\r\n# Typical weekly schedule\r\n* Monday - Lecture\r\n* Tuesday - Lab Day\r\n* Wednesday - Lecture\r\n* Thursday - Lab Day\r\n* Friday - Exam Day\r\n\r\nBecause this is summer, and we are going to move fast. That honestly means that every day, you'll probably end up working on this class in some way. I won't be posting a schedule ahead of time, but I will post a brief overview of the chapters that were covered on what day on this page.\r\n\r\n# <a href=\"http://anderson-lab.github.io/\">Anderson Data Science Research Lab</a>\r\n\r\n<p align=\"justify\">\r\n<a href=\"http://anderson-lab.github.io/\"><img src=\"http://freyja.cs.cofc.edu/Paul-labs-logo.png\" alt=\"Data Science Research Lab\" height=\"100\" align=\"right\"  hspace=\"10px\"/></a>\r\nThe Anderson Data Science Research Lab specializes in applying data mining, machine learning, and artificial intelligence to the fields of bioinformatics, genomics, and metabolomics. We develop algorithms and software to tackle some of the most challenging and interesting data intensive problems in the life sciences. Our research interests include data science, big data, pattern analysis in high-dimensionality data sets, evolutionary computation and optimization, machine learning, computational genomics, cloud computing, computational metabolomics, and eScience. We currently have multidisciplinary projects underway in metabolomics, human cognition, toxicology, marine biology, medical genomics, biomedical informatics, and marine genomics.\r\n</p>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}