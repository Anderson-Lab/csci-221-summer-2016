{
  "name": "CSCI 221 Summer 2016",
  "tagline": "Computer Science @ College of Charleston",
  "body": "## Important Links\r\n* [Facebook Group](https://www.facebook.com/groups/1073705086030591/)\r\n* [Slides]()\r\n* [Programming Assignments]()\r\n* [Course Materials]()\r\n\r\n# Syllabus\r\n## Official Course Description\r\n<p align=\"justify\">\r\n<a href=\"http://www.cofc.edu\"><img src=\"http://freyja.cs.cofc.edu/cofc.sepng\" height=\"50\" align=\"right\" hspace=\"10px\"> </a>\r\nCSCI 221 Computer Programming II This course further develops object-oriented programming introduced in CSCI 220. Topics include file input/output, inheritance and polymorphism, exceptions, error handling, and algorithm analysis. Data structures include lists, stacks, and queues. Algorithms include searching and sorting. Prerequisites: CSCI 220 and CSCI 222. Prerequisite or Co-requisite: MATH 207.\r\n</p>\r\n\r\n## Required Text\r\nAn Introduction to Programming Using Java by Anthony J. Dos Reis - http://www.jblearning.com/catalog/9781449639037/\r\n\r\n## Course Details\r\n\r\n### Contact Information\r\n* Professor: Dr. Paul Anderson\r\n* Office: 313 HWEA\r\n* Office Hours: My door is always open. Even if it isn't, please knock. I always love to hear from students. I have a little sign that I try to keep up in the window to show when I am in the office.\r\n* E-mail: andersonpe2@cofc.edu\r\n* Office Phone: 843-953-8151\r\n* Facebook: andersonpe2@cofc.edu\r\n\r\n### Course (learning) outcomes\r\n\r\n* Classify the activities of the software development process into its component parts.\r\n* Apply the components of the software development process in developing software solutions to problems.\r\n* Lists:\r\n1. Apply lists implemented as arrays, ArrayLists and other Java Collections classes.\r\n2. Develop algorithms to compute the min/max or sum of lists of numerical values stored in.\r\n* Develop algorithms to search for needed values, and insert records in some order.\r\n* Apply classes in program development including object instantiation, system drivers, constructors, method types (mutators, accessors, predicates, toString, finalizer), static versus nonstatic methods/variables, access qualifiers, garbage collection, use of the this reference.\r\n* Develop well-designed methods.\r\n* Apply class relationships including dependency, aggregation, and inheritance and illustrate such relationships using UML diagrams.\r\n* Apply polymorphism through inheritance and interfaces in problem solving and program development.\r\n* Develop well-designed classes.\r\n* Apply exceptions in program development.\r\n* Recursion: 1. Trace and 2. Develop\r\n\r\n### Grading Policy\r\n\r\n* Exams - 40%\r\n* Final Exam - 10%\r\n* Programming Assignments - 50%\r\n\r\nGrading Scale: A: 90-100; B: 80-89; C: 70-79; D: 65-69; F: <65. Plusses and minuses will be used at the discretion of the instructor.\r\n\r\nGrading Guidelines: Submitted work requires Analysis, Evaluation, and Creation of ideas, concepts, and materials into various deliverables (e.g., see revised Bloom's Taxonomy and reference below).\r\n\r\n* The grade of A is for work that involves high-quality achievement in all three Bloom areas.\r\n* The grade of B is for work that involves high-quality achievement in at least two Bloom areas, and medium-level achievement in the other.\r\n* The grade of C is for work that involves high-quality achievement in at least one Bloom area, and medium-level achievement in the others.\r\n* The grade of F is for work that does not meet above criteria.\r\n\r\nReference: Errol Thompson, Andrew Luxton-Reilly, Jacqueline L. Whalley, Minjie Hu, and Phil Robbins. 2008. Bloom's taxonomy for CS assessment. In Proceedings of the tenth conference on Australasian computing education - Volume 78 (ACE '08), Simon Hamilton and Margaret Hamilton (Eds.), Vol. 78. Australian Computer Society, Inc., Darlinghurst, Australia, Australia, 155-161.\r\n\r\n### Lecture Style\r\n\r\nLecturing about programming is like teaching someone how to swim by talking about swimming. Interesting, but not very helpful. This class has been designed with this in mind. We will be using a flipped classroom, where students are expected to listen to pre-recorded lectures outside of class. These are tightly integrated with the smaller programming assignments. We will discuss the problems themselves in class when appropriate. More importantly, most of our class time will be spent developing a \"large\" software project from scratch. The software we develop as a class is to serve as a template for your own large software project.\r\n\r\n### Exams \r\n\r\nExams will be administered at the beginning of each class using the computers in class. There will also be one standard final exam.\r\n\r\n### Programming Assignments\r\n\r\nProgramming is all about practice. Every day there will be programming assignments due.\r\n\r\n### Lessons\r\n\r\nUdacity also has questions embedded in the lesson section. Upload a copy of your progress page (as an image) showing the percentage complete on the section.\r\n\r\n### Programming Project\r\n\r\nEach student will choose a semester long project consisting of 7-12 classes. You will be required to implement this project over the semester and present 3 times:\r\n\r\n- 1st Presentation (3-5 Minutes) – Show the class your class model design and implementation\r\n\r\n* Presentation Date: September 22nd and 24th\r\n* Presentation Schedule: https://www.dropbox.com/s/jrmpindcalwsdbl/FirstPresentationSchedule.xlsx?dl=0\r\n* Prepare a 3 minute presentation (2 minutes for questions) that covers your project idea, presents your class model, two use cases, and your class scaffold implementation\r\n\r\n* UML and Use Cases\r\n1. https://www.andrew.cmu.edu/course/90-754/umlucdfaq.html\r\n2. http://www.objectmentor.com/resources/articles/umlClassDiagrams.pdf\r\n* Use Visual Paradigm to diagram to create your model (http://www.visual-paradigm.com/download/).\r\n1. See the Facebook page for the education key, and make sure to use your .edu address <- very important.\r\n* Again, you will need to present (very briefly)\r\n1. Class Model with at least 7 classes. You must use at least once composition, aggregation, and inheritance.\r\n2. Use Cases\r\n3. Scaffold Implementation (blank classes showing inheritance and aggregation)\r\n\r\n– 2nd Presentation (3 Minutes) – Show the class your implementation with console IO\r\n\r\n* Presentation Date: Nov 3rd and 5th\r\n* Presentation Schedule: TBA\r\n* Prepare a 2 minute video that demonstrates your working command line (console) prototype.\r\n* It must have at least 90% functionality.\r\n* Video must be uploaded to YouTube, and a link to your presentation must be uploaded to the dropbox in OAKS.\r\n\r\n- Part 3 and Final Submission Details\r\n\r\nSee Google presentation slides for more information\r\n\r\n– Final Presentation (5 Minutes) – Show the class your GUI Implementation\r\n\r\nSee Google presentation slides for more information\r\n\r\nYour project will need to receive input of the data for your classes and persist the data to disk so it can be read back on the next execution of your application. Your final project will be graded on the mastery of the individual course (learning) outcomes. Each of these will be scored from a level of 0 to 10. More details will be given throughout the semester.\r\n\r\n### Honor Code\r\n\r\nYou must do your work alone (or with your teammates, for group assignments).\r\nYou must identify your sources of material and inspiration. It is a violation of the honor code to present someone else's work or ideas as your own.\r\nIn any course deliverable, you must always identify the person(s) that helped you (directly or indirectly), if any, and explain their contribution to your work.\r\nAlso see the College of Charleston Student Handbook, especially sections on The Honor Code (p. 11), and Student Code of Conduct (p. 12). There is other useful information there.\r\nClassroom Policies\r\n\r\nYou are expected to take good notes during class.\r\nYou are expected to participate in class with questions and invited discussion.\r\nYou are expected to attend all classes. The grade 'WA' will be given for excessive (>= 3) absences. If you miss class, you must get an absence memo from the Associate Dean of Students Office; also, you are responsible for announcements made in class, assignment due dates, etc.\r\nYou should turn off all electronic devices (e.g., cell phones, pagers, etc.).\r\nIn summary, you should contribute positively to the classroom learning experience, and respect your classmates right to learn (see College of Charleston Student Handbook, section on Classroom Code of Conduct (p. 58)).\r\nLate Policy\r\n\r\nNo late days will be allowed without an excuse. Falling behind on assignments will make it difficult to achieve the learning outcomes of this course.\r\n\r\n### Classroom Policies\r\n* You are expected to take good notes during class.\r\n* You are expected to participate in class with questions and invited discussion.\r\n* You are expected to attend all classes. The grade 'WA' will be given for excessive (>= 3) absences. If you miss class, you must get an absence memo from the Associate Dean of Students Office; also, you are responsible for announcements made in class, assignment due dates, etc.\r\n* You should turn off all electronic devices (e.g., cell phones, pagers, etc.).\r\n* In summary, you should contribute positively to the classroom learning experience, and respect your classmates right to learn (see College of Charleston Student Handbook, section on Classroom Code of Conduct (p. 58)).\r\n\r\n### Late Policy\r\n\r\nNo late days will be allowed without a documented excuse.\r\n\r\n# <a href=\"http://anderson-lab.github.io/\">Anderson Data Science Research Lab</a>\r\n\r\n<p align=\"justify\">\r\n<a href=\"http://anderson-lab.github.io/\"><img src=\"http://freyja.cs.cofc.edu/Paul-labs-logo.png\" alt=\"Data Science Research Lab\" height=\"100\" align=\"right\"  hspace=\"10px\"/></a>\r\nThe Anderson Data Science Research Lab specializes in applying data mining, machine learning, and artificial intelligence to the fields of bioinformatics, genomics, and metabolomics. We develop algorithms and software to tackle some of the most challenging and interesting data intensive problems in the life sciences. Our research interests include data science, big data, pattern analysis in high-dimensionality data sets, evolutionary computation and optimization, machine learning, computational genomics, cloud computing, computational metabolomics, and eScience. We currently have multidisciplinary projects underway in metabolomics, human cognition, toxicology, marine biology, medical genomics, biomedical informatics, and marine genomics.\r\n</p>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}